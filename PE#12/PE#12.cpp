#include<iostream>
#include<vector>
using namespace std;

/* The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
                       1: 1
                       3: 1,3
                       6: 1,2,3,6
                      10: 1,2,5,10
                      15: 1,3,5,15
                      21: 1,3,7,21
                      28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 */

vector<uint64_t> sieve(size_t n){
	vector<bool> prime(n, true);
	prime[0]=false;
	prime[1]=false;
	for(size_t i=2; i*i<n; i++){
		if(prime[i]){
			for(size_t j=i*i; j<=n; j=j+i)
				prime[j]=false;
			}
		}
		
	vector<uint64_t> primevec;
	for(size_t i=0; i<n; i++){
		if(prime[i]){
			primevec.push_back(i);
		}
	}
	return primevec;
}
const vector<uint64_t> primeList(sieve(1000));

uint64_t numberOfdiv(uint64_t number){
	uint32_t divs=1;
	uint64_t p;
	uint64_t num=number; 
	for(auto prime: primeList){
		if(prime*prime > number){
			return divs*2;
		}
		p=1;
		while(num%prime==0){
			++p;
			num = num/prime;
		}
		divs = divs*p;
		if(num==1){
			return divs;
		}
	}
	return divs;
	}
	
void triangularNumber(){
	uint64_t num=1;
	size_t i = 2;
	while(numberOfdiv(num)<500){
		num = num + i;
		++i;
	}
	cout<<num<<endl;
}

int main(){
	triangularNumber();
  return 0;	
}
